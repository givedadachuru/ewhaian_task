/* 스킵 내비게이션 */
#skip {
    position: relative;
}

#skip a {
    position: absolute;
    left: 0px;
    top: -35px;
    border: 1px solid #fff;
    color: #fff;
    background: #333;
    /* bakcground를 넣어줘야 버튼 하나씩 보임. 안 그러면 투명해서 텍스트끼리 겹침*/
    line-height: 30px;
    width: 140px;
    text-align: center;
}

#skip a:active,
#skip a:focus {
    top: 0;
    /* focus는 키보드(tap키)로 선택 되었을때, active는 버튼을 클릭했을 때 */
}

/* 레이아웃 */

#wrap {}

#header {
    height: 325px;
    background: url(../img/header_bg.jpg) center top repeat-x;
}

#contents {}

#footer {
    height: 200px;
    background: #333;
}

/* 컨텐츠 레이아웃 */
#cont_nav {
    background-color: #f6fdff;
}

#cont_tit {
    background-color: #EAF7FD;
}

#cont_ban {
    width: 100%;
    height: 200px;
    background: #555;
}

#cont_cont {
    width: 100%;
    height: 200px;
    background: #666;
}


/* 컨테이너 */
.container {
    width: 990px;
    margin: 0 auto;
    height: inherit;
    background: rgba(255, 255, 255, 0.3);
}

/* 헤더 */

.header .header-menu {
    text-align: right;
    /* a 링크는 인라인 구조라서 그 자체가 자기 영역이기 때문에 텍스트 오른쪽 정렬을 줘도 소용이 없음.
    블록 구조인 애한테 줘야 오른쪽 정렬 가능*/
}

.header .header-menu a {
    color: #fff;
    padding: 10px 0px 10px 13px;
    display: inline-block;
    /* 인라인 성질을 가지면서도 블록처럼!
    즉 일렬로 배열되면서도 블록처럼 padding 값을 가지게 되어 상하좌우를 일정한 간격만큼 띄울 수 있음 */
}

.header .header-menu a:hover {
    color: #666;
}

.header .header-tit {
    text-align: center;
}

.header .header-tit h1 {
    background-color: #4aa8d4;
    font-size: 28px;
    padding: 5px 20px 6px 20px;
    display: inline-block;
    color: white;
    /* 인라인 성질로 바꾸게 되면 text-align: center가 안 먹힘. 그래서 블록 구조에 따로 적용해줘야 함 */
    margin-top: 40px;
    /* 얘 때문에 inline-block을 써 줌 */
    font-weight: normal;
    text-transform: uppercase;
}

.header .header-tit a {
    display: inline-block;
    background-color: #2698cb;
    font-size: 18px;
    color: #fff;
    padding: 5px 20px 6px 20px;
    margin-top: -5px;
}

.header .header-icon {
    text-align: center;
    margin-top: 30px;
}

.header .header-icon a {
    width: 60px;
    height: 60px;
    display: inline-block;
    background: url(../img/icon.png);
    margin: 0 3px;
}

.header .header-icon a.icon1 {
    background-position: 0 0;
}

.header .header-icon a.icon2 {
    background-position: 0 -60px;
}

.header .header-icon a.icon3 {
    background-position: 0 -120px;
}

.header .header-icon a.icon4 {
    background-position: 0 -180px;
}

.header .header-icon a.icon1:hover {
    background-position: -60px 0;
}

.header .header-icon a.icon2:hover {
    background-position: -60px -60px;
}

.header .header-icon a.icon3:hover {
    background-position: -60px -120px;
}

.header .header-icon a.icon4:hover {
    background-position: -60px -180px;
}

/* float: left로 인한 영역깨짐 (height값이 0이 됨) 방지법
    1. 깨지는 영역에 똑같이 float: left 사용 (비추 --> 모든 박스에 float: left를 사용하게 됨)
    2. float의 성질을 차단하는 clear: both;를 사용 (비추 --> 어떤 영역이 깨졌는지 찾기 어려움)
    3. float을 사용한 상위 박스한테 overflow: hidden을 사용 (현재는 제일 많이 사용)
    4. clearfix를 사용 (가장 좋은 방법 // 반응형 가서 배울 예정)
*/

/* 전체 메뉴 */
.nav {
    overflow: hidden;
    padding: 30px 0;
}

.nav>div {
    float: left;
    width: 40%;
}

.nav>div:last-child {
    width: 20%;
}

/* ie9부터 사용가능. 낮은 버전에 맞춰야 한다면 class 활용 */

.nav>div.last {
    width: 20%;
}

.nav>div h3 {
    font-size: 18px;
    color: #25a2d0;
    margin-bottom: 4px;
}

.nav>div ol {
    overflow: hidden;
}

.nav>div ol li {
    float: left;
    width: 50%;
}

.nav>div.last ol li {
    width: 100%;
}

.nav>div ol li a:hover {
    text-decoration: underline;
}

/* 타이틀 */
.tit {
    position: relative;
}

.tit h2 {
    font-size: 40px;
    text-align: center;
    padding: 5px 0;
    letter-spacing: 2px;
    color: #2c94c4;
    font-family: 'Nanum Brush Script', cursive;
}

.tit .btn {
    position: absolute;
    top: 5px;
    right: 0;
    width: 60px;
    height: 60px;
    background: url(../img/icon.png) no-repeat 0 -600px;
}